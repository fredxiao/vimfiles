.. _tut-intro:

**********************
开胃菜
**********************

如果你在计算机上做很多工作，你希望看到许多的工作或者任务自动地完成。例如，您可能会在大量的文本文件中进行查找替换，或者通过复杂的方式重命名和重新组织一大堆的图片文件，也许你想编写一个小型的自定义数据库（定制数据库）。或专门的GUI应用程序，或一个简单的游戏。

如果你是一个专业的软件开发人员，你想要使用一些C/ C + + / Java库工作，但是发现常规的编写/编译/测试/重新编译周期太慢。也许你正在为这些库编写一个测试套件，然而会发现这是一项乏味的工作（任务）。或者，也许你已经编写带有一个扩展语言的应用程序，你不希望为了你的应用程序去设计和实现一种全新的语言。

Python正是你所需要的。（Python就是为你而生的）

你可以写一个UNIX shell脚本或Windows批处理文件完成任务，然而shell脚本更擅长于移动文件和修改文本数据，而不适合图形界面应用程序或游戏。你可以写一个C / C + + / Java的程序，但是就算一个简单的方案草案，你也需要花费大量的时间。Python是更易于使用，可在Windows，Mac OS X和Unix操作系统上使用，并会帮助你更快速地完成工作。

Python简单易用，但它是一个真正的编程语言，比shell脚本或批处理文件提供了更多的结构和对大型程序的支持。另一方面，Python比起C提供了更多的错误检查，同时作为一门 *高级语言*，它具有高级的内置数据类型，比如灵活的数组和字典。由于python提供了更为通用的数据类型，比起Awk甚至Perl，她适合更宽广的问题领域。同样在做许多其他的事情上，Python 也不会比别的编程语言更复杂。 

Python允许你将自己的程序分成不同的模块，可以在其他Python程序中重用这些模块。它配备了一个标准模块，你可以自由使用这些标准模块作为程序的基本结构，或者作为例子开始学习Python编程。这些模块提供了类似文件I / O，系统调用，网络编程，甚至像Tk的用户图形界面工具包

Python是一种解释性语言，她可以在程序开发期节省相当多的时间，因为她不需要编译和链接。Python解释器可以交互地使用，这使得很容易体验python语言的特性，以便于编写发布用的程序，或者进行自下而上的开发。它也是一个方便的桌面计算器。

Python让程序可以写得很健壮和具有可读性，用Python编写的程序通常比C，C + +或Java要短得多程序，其原因如下：

* 高级的数据类型使你在一个语句中可以表达出复杂的操作;

* 语句的组织是通过缩进而不是开始和结束括号; 

* 不需要变量或参数的声明。

Python是 *可扩展的*：如果你知道用C写程序就很容易为解释器添加一个新的内置函数或模块，也能以最快速度执行关键操作（优化），或者使 Python程序能够链接到所需的二进制架构上（比如某个专用的商业图形库）。一旦你真正迷上了python，你可以将python解释器联接到用C写的应用上，使得解释器作为这个应用的扩展或命令行语言。

顺便说下，这个语言的名字来源于英国广播公司的节目"Monty Python的飞行马戏团"，与爬行动物（蟒蛇）无关。在文档中引用 Monty Python典故不仅是允许的，而且还是很鼓励的！

现在了解了python所有令人兴奋的东西，也许你希望试用她了。学习语言的最佳途径是使用它，如你所读到的，本教程将引领你使用python解释器。

在下一章中将直接解释解释器的使用。这没有什么高深的信息，不过有助于我们练习后面展示的例子。

本教程的其余部分通过实例介绍python语言特性和系统功能。开始用简单的表达式，语句和数据类型，进一步是功能和模块，最后是诸如异常和自定义类这样的高级内容。


