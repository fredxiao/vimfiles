.. _tut-errors:

*********************
错误和异常
*********************

至今为止还没有进一步的谈论过错误信息，不过在你已经试验过的那些例子中，可能已经遇到过一些。Python 中（至少）有两种错误：语法错误和异常（ *syntax errors* 和 *exceptions* ）。


.. _tut-syntaxerrors:

语法错误
=============

语法错误，也称作解释错误，可能是学习 Python 的过程中最容易犯的 ::

   >>> while True print 'Hello world'
     File "<stdin>", line 1, in ?
       while True print 'Hello world'
                      ^
   SyntaxError: invalid syntax

解析器会重复出错的行，并在行中最早发现的错误位置上显示一个小“箭头”。错误（至少是被检测到的）就发生在箭头 *指向* 的位置。示例中的错误表现在关键字 :keyword:`print` 上，因为在它之前少了一个冒号（ ``':'`` ）。同时也会显示文件名和行号，这样你就可以知道错误来自哪个脚本，什么位置。


.. _tut-exceptions:

异常
==========

即使是在语法上完全正确的语句，尝试执行它的时候，也有可能会发生错误。在程序运行中检测出的错误称之为 *异常*，它通常不会导致致命的问题，你很快就会学到如何在 Python 程序中控制它们。大多数异常不会由程序处理，而是显示一个错误信息 ::

   >>> 10 * (1/0)
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   ZeroDivisionError: integer division or modulo by zero
   >>> 4 + spam*3
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   NameError: name 'spam' is not defined
   >>> '2' + 2
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   TypeError: cannot concatenate 'str' and 'int' objects

错误信息的最后一行指出发生了什么错误。异常也有不同的类型，异常类型做为错误信息的一部分显示出来：示例中的异常分别为 零除错误（ :exc:`ZeroDivisionError` ） ，命名错误（ :exc:`NameError`） 和 类型 错误（ :exc:`TypeError` ）。打印错误信息时，异常的类型作为异常的内置名显示。对于所有的内置异常都是如此，不过用户自定义异常就不一定了（尽管这是一个很有用的约定）。标准异常名是内置的标识（没有保留关键字）。 

这一行后一部分是关于该异常类型的详细说明，这意味着它的内容依赖于异常类型。

错误信息的前半部分以堆栈的形式列出异常发生的位置。通常在堆栈中列出了源代码行，然而，来自标准输入的源码不会显示出来。 

:ref:`bltin-exceptions` 列出了内置异常和它们的含义。


.. _tut-handling:

控制异常
===================

可以编写程序来控制已知的异常。参见下例，此示例要求用户输入信息，一直到得到一个有效的整数为止，而且允许用户中断程序（使用 :kbd:`Control-C`  或其它什么操作系统支持的操作）；需要注意的是用户生成的中断会抛出 :exc:`KeyboardInterrupt` 异常。 ::

   >>> while True:
   ...     try:
   ...         x = int(raw_input("Please enter a number: "))
   ...         break
   ...     except ValueError:
   ...         print "Oops!  That was no valid number.  Try again..."
   ...

:keyword:`try` 语句按如下方式工作。

* 首先，执行 *try* 子句 （在 :keyword:`try` 和 :keyword:`except` 关键字之间的部分）。

* 如果没有异常发生， *except* 子句 在 :keyword:`try` 语句执行完毕后就被忽略了。

* 如果在 try 子句执行过程中发生了异常，那么该子句其余的部分就会被忽略。如果异常匹配于 :keyword:`except` 关键字后面指定的异常类型，就执行对应的except子句。然后继续执行 :keyword:`try` 语句之后的代码。

* 如果发生了一个异常，在 :keyword:`except` 子句中没有与之匹配的分支，它就会传递到上一级 :keyword:`try`  语句中。如果最终仍找不到对应的处理语句，它就成为一个 *未处理异常* ，终止程序运行，显示提示信息。

一个 :keyword:`try` 语句可能包含多个except子句，分别指定处理不同的异常。至多只会有一个分支被执行。异常处理程序只会处理对应的try子句中发生的异常，在同一个 :keyword:`try`  语句中，其他子句中发生的异常则不作处理。一个except子句可以在括号中列出多个异常的名字，例如 ::

   ... except (RuntimeError, TypeError, NameError):
   ...     pass

最后一个 except 子句可以省略异常名，把它当做一个通配项使用。一定要慎用这种方法，因为它很可能会屏蔽掉真正的程序错误，使人无法发现！它也可以用于打印一行错误信息，然后重新抛出异常（可以使调用者更好的处理异常）::

   import sys

   try:
       f = open('myfile.txt')
       s = f.readline()
       i = int(s.strip())
   except IOError as (errno, strerror):
       print "I/O error({0}): {1}".format(errno, strerror)
   except ValueError:
       print "Could not convert data to an integer."
   except:
       print "Unexpected error:", sys.exc_info()[0]
       raise

:keyword:`try` ... :keyword:`except` 语句可以带有一个 *else子句* ，该子句只能出现在所有except子句之后。当try语句没有抛出异常时，需要执行一些代码，可以使用这个子句。例如 ::

   for arg in sys.argv[1:]:
       try:
           f = open(arg, 'r')
       except IOError:
           print 'cannot open', arg
       else:
           print arg, 'has', len(f.readlines()), 'lines'
           f.close()

使用 :keyword:`else` 子句比在 :keyword:`try` 子句中附加代码要好，因为这样可以避免 :keyword:`try` ... :keyword:`except` 意外的截获本来不属于它们保护的那些代码抛出的异常。 

发生异常时，可能会有一个附属值，作为异常的 *参数* 存在。这个参数是否存在、是什么类型，依赖于异常的类型。 

在异常名（列表）之后，也可以为 except 子句指定一个变量。这个变量绑定于一个异常实例，它存储在 ``instance.args`` 的参数中。为了方便起见，异常实例定义了 :meth:`__str__`  ，这样就可以直接访问过打印参数而不必引用 ``.args`` 。 这种做法不受鼓励。相反，更好的做法是给异常传递一个参数（如果要传递多个参数，可以传递一个元组），把它绑定到 message 属性。

一旦异常发生，它会在抛出前绑定所有指定的属性。::

   >>> try:
   ...    raise Exception('spam', 'eggs')
   ... except Exception as inst:
   ...    print type(inst)     # the exception instance
   ...    print inst.args      # arguments stored in .args
   ...    print inst           # __str__ allows args to printed directly
   ...    x, y = inst          # __getitem__ allows args to be unpacked directly
   ...    print 'x =', x
   ...    print 'y =', y
   ...
   <type 'exceptions.Exception'>
   ('spam', 'eggs')
   ('spam', 'eggs')
   x = spam
   y = eggs

对于未处理的异常，如果它有一个参数，那做就会作为错误信息的最后一部分（“明细”）打印出来。 

异常处理句柄不止可以处理直接发生在 try 子句中的异常，即使是其中（甚至是间接）调用的函数，发生了异常，也一样可以处理。例如 ::

   >>> def this_fails():
   ...     x = 1/0
   ...
   >>> try:
   ...     this_fails()
   ... except ZeroDivisionError as detail:
   ...     print 'Handling run-time error:', detail
   ...
   Handling run-time error: integer division or modulo by zero


.. _tut-raising:

抛出异常
==================

程序员可以用 :keyword:`raise` 语句强制指定的异常发生。例如 ::

   >>> raise NameError('HiThere')
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   NameError: HiThere

要抛出的异常由 :keyword:`raise` 的唯一参数标识。它必需是一个异常实例或异常类（继承自 :class:`Exception` 的类）。

如果你需要明确一个异常是否抛出，但不想处理它， :keyword:`raise` 语句可以让你很简单的重新抛出该异常。::

   >>> try:
   ...     raise NameError('HiThere')
   ... except NameError:
   ...     print 'An exception flew by!'
   ...     raise
   ...
   An exception flew by!
   Traceback (most recent call last):
     File "<stdin>", line 2, in ?
   NameError: HiThere


.. _tut-userexceptions:

用户自定义异常
=======================

在程序中可以通过创建新的异常类型来命名自己的异常（Python 类的内容请参见 :ref:`tut-classes`  ）。异常类通常应该直接或间接的从 :exc:`Exception` 类派生，例如 ::

   >>> class MyError(Exception):
   ...     def __init__(self, value):
   ...         self.value = value
   ...     def __str__(self):
   ...         return repr(self.value)
   ...
   >>> try:
   ...     raise MyError(2*2)
   ... except MyError as e:
   ...     print 'My exception occurred, value:', e.value
   ...
   My exception occurred, value: 4
   >>> raise MyError('oops!')
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
   __main__.MyError: 'oops!'

在这个例子中，:class:`Exception` 默认的 :meth:`__init__` 被覆盖。新的方式简单的创建 *value* 属性。这就替换了原来创建 *args* 属性的方式。 

异常类中可以定义任何其它类中可以定义的东西，但是通常为了保持简单，只在其中加入几个属性信息，以供异常处理句柄提取。如果一个新创建的模块中需要抛出几种不同的错误时，一个通常的作法是为该模块定义一个异常基类，然后针对不同的错误类型派生出对应的异常子类。::

   class Error(Exception):
       """Base class for exceptions in this module."""
       pass

   class InputError(Error):
       """Exception raised for errors in the input.

       Attributes:
           expr -- input expression in which the error occurred
           msg  -- explanation of the error
       """

       def __init__(self, expr, msg):
           self.expr = expr
           self.msg = msg

   class TransitionError(Error):
       """Raised when an operation attempts a state transition that's not
       allowed.

       Attributes:
           prev -- state at beginning of transition
           next -- attempted new state
           msg  -- explanation of why the specific transition is not allowed
       """

       def __init__(self, prev, next, msg):
           self.prev = prev
           self.next = next
           self.msg = msg

与标准异常相似，大多数异常的命名都以“Error”结尾。

很多标准模块中都定义了自己的异常，用以报告在他们所定义的函数中可能发生的错误。关于类的进一步信息请参见 :ref:`tut-classes` 一章。


.. _tut-cleanup:

定义清理行为
=========================

:keyword:`try` 语句还有另一个可选的子句，目的在于定义在任何情况下都一定要执行的功能。例如 ::

   >>> try:
   ...     raise KeyboardInterrupt
   ... finally:
   ...     print 'Goodbye, world!'
   ...
   Goodbye, world!
   Traceback (most recent call last):
     File "<stdin>", line 2, in ?
   KeyboardInterrupt

不管有没有发生异常， *finally子句* 在程序离开 :keyword:`try` 后都一定会被执行。当 :keyword:`try` 语句中发生了未被 :keyword:`except` 捕获的异常（或者它发生在 :keyword:`except` 或 :keyword:`else` 子句中），在 :keyword:`finally` 子句执行完后它会被重新抛出。 :keyword:`try` 语句经由 :keyword:`break` ，:keyword:`continue` 或 :keyword:`return` 语句退 出也一样会执行 :keyword:`finally` 子句。以下是一个更复杂些的例子（在同 一个 :keyword:`try` 语句中的 :keyword:`except` 和 :keyword:`finally` 子句的工作方式与 Python 2.5 一样） ::

   >>> def divide(x, y):
   ...     try:
   ...         result = x / y
   ...     except ZeroDivisionError:
   ...         print "division by zero!"
   ...     else:
   ...         print "result is", result
   ...     finally:
   ...         print "executing finally clause"
   ...
   >>> divide(2, 1)
   result is 2
   executing finally clause
   >>> divide(2, 0)
   division by zero!
   executing finally clause
   >>> divide("2", "1")
   executing finally clause
   Traceback (most recent call last):
     File "<stdin>", line 1, in ?
     File "<stdin>", line 3, in divide
   TypeError: unsupported operand type(s) for /: 'str' and 'str'

如你所见， :keyword:`finally` 子句在任何情况下都会执 行。 :exc:`TypeError` 在两个字符串相除的时候抛出，未被 except 子句捕获，因此在 :keyword:`finally` 子句执行完毕后重新抛出。 

在真实场景的应用程序中， :keyword:`finally` 子句用于释放外部资源（文件 或网络连接之类的），无论它们的使用过程中是否出错。


.. _tut-cleanup-with:

预定义清理行为
===========================

有些对象定义了标准的清理行为，无论对象操作是否成功，不再需要该对象的时 候就会起作用。以下示例尝试打开文件并把内容打印到屏幕上。::

   for line in open("myfile.txt"):
       print line

这段代码的问题在于在代码执行完后没有立即关闭打开的文件。这在简单的脚本 里没什么，但是大型应用程序就会出问题。 :keyword:`with` 语句使得文件之类的对象可以 确保总能及时准确地进行清理。::

   with open("myfile.txt") as f:
       for line in f:
           print line

语句执行后，文件 *f* 总会被关闭，即使是在处理文件中的数据时出错也一样。 其它对象是否提供了预定义的清理行为要查看它们的文档。


